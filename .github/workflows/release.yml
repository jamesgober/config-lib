name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Validate version consistency
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        CARGO_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        
        if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
          echo "Tag version ($TAG_VERSION) doesn't match Cargo.toml version ($CARGO_VERSION)"
          exit 1
        fi

    - name: Run full test suite
      run: cargo test --all --features xml,hcl,env-override,validation,json

    - name: Check documentation
      run: cargo doc --all-features --no-deps

    - name: Verify examples work
      run: cargo run --example basic --features xml,hcl,env-override,validation,json

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract changelog
      id: changelog
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Extracting changelog for version $TAG_VERSION"
        
        # Extract changelog section for this version
        awk "/^## \[$TAG_VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release_notes.md
        
        if [ ! -s release_notes.md ]; then
          echo "No changelog found for version $TAG_VERSION"
          echo "Release notes not available." > release_notes.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true

  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

  build-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: validate-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ''
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            suffix: '-musl'
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: '.exe'
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ''
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }} --features xml,hcl,env-override,validation,json

    - name: Package binary
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a ../../../config-lib-${{ matrix.target }}.zip config-lib${{ matrix.suffix }}
        else
          tar czvf ../../../config-lib-${{ matrix.target }}.tar.gz config-lib${{ matrix.suffix }}
        fi

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: config-lib-${{ matrix.target }}
        path: config-lib-${{ matrix.target }}.*

  upload-binaries:
    name: Upload Release Binaries
    runs-on: ubuntu-latest
    needs: [create-release, build-binaries]
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Upload binaries to release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          config-lib-*/config-lib-*