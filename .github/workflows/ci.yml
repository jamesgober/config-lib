name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, 1.82]  # MSRV is 1.82
        exclude:
          # Beta testing only on Linux to save CI time
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}

    - name: Check formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check

    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose

    - name: Run tests (default features)
      run: cargo test --verbose

    - name: Run tests (all working features)
      run: cargo test --verbose --features xml,hcl,env-override,validation,json

    - name: Build examples
      run: cargo build --examples --features xml,hcl,env-override,validation,json

    - name: Run doctests
      run: cargo test --doc --features xml,hcl,env-override,validation,json

  nightly:
    name: Nightly Tests
    runs-on: ubuntu-latest
    continue-on-error: true  # Nightly can fail
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run tests with nightly
      run: cargo test --verbose --features xml,hcl,env-override,validation,json

    - name: Run clippy with nightly features
      run: cargo clippy --all-targets --all-features

  cross-compile:
    name: Cross Compile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - wasm32-unknown-unknown

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cross
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Cross compile
      run: cross build --target ${{ matrix.target }} --features xml,hcl,env-override,validation,json

  minimal-deps:
    name: Minimal Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Test with minimal features
      run: cargo test --no-default-features

    - name: Test each feature individually
      run: |
        cargo test --no-default-features --features conf
        cargo test --no-default-features --features xml
        cargo test --no-default-features --features hcl
        cargo test --no-default-features --features validation
        cargo test --no-default-features --features env-override
        cargo test --no-default-features --features json